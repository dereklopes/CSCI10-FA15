/*
 * Project 1 - Vending Machine
 *
 * written by			    Derek Lopes
 * created on			    9 October 2015
 * last modified on		9 October 2015
 *
 * A vending machine.
 *
 */
program project1;

// includes
#include( "stdlib.hhf" )

// static declarations
static
  credits: uns16 := 1000;
  n_snickers: uns8 := 5;
  n_mounds: uns8 := 3;
  n_aj: uns8 := 6;
  n_mm: uns8 := 8;
  n_skittles: uns8 := 4;
  c_snickers: uns16 := 100;
  c_mounds: uns16 := 75;
  c_aj: uns16 := 75;
  c_mm: uns16 := 125;
  c_skittles: uns16 := 125;

// procedure forward declarations
procedure listItems; @forward;

procedure getUns8( prompt:string; min:uns8; max:uns8 ); @returns( "al" ); @forward;

procedure checkStock( item:uns8 ); @returns( "bl" ); @forward;

procedure getCredits( item:uns8 ); @returns( "bl" ); @forward;

procedure buyItem( item:uns8 ); @forward;

procedure getReceipt; @forward;
// procedure definitions
procedure listItems;
begin listItems;
  stdout.put( "[1] Snickers: ", n_snickers, " remaining (100 credits)", nl);
  stdout.put( "[2] Mounds: ", n_mounds, " remaining (75 credits)", nl);
  stdout.put( "[3] Almond Joy: ", n_aj, " remaining (75 credits)", nl);
  stdout.put( "[4] M&M's: ", n_mm, " remaining (125 credits)", nl);
  stdout.put( "[5] Skittles: ", n_skittles, " remaining (125 credits)", nl, nl);
end listItems;

procedure getUns8( prompt:string; min:uns8; max:uns8 );
begin getUns8;
  stdout.put(prompt);
  forever
    try
      stdin.getu8();
      unprotected
        if( (al >= min && al <= max) || al == 0 ) then
          break;
        else
          stdout.put("Value must be at least ", min, " and at most ", max, ".", nl);
        endif;
    anyexception
      stdout.put("Invalid input");
    endtry;
  endfor;
end getUns8;

procedure checkStock( item:uns8 );
begin checkStock;
  if ( (item == 1) && (n_snickers > 0) ) then
    mov( 1, bl );
  elseif ( (item == 2) && (n_mounds > 0) ) then
    mov( 1, bl );
  elseif ( (item == 3) && (n_aj > 0) ) then
    mov( 1, bl );
  elseif ( (item == 4) && (n_mm > 0) ) then
    mov( 1, bl );
  elseif ( (item == 5) && (n_skittles > 0) ) then
    mov( 1, bl );
  else
    mov( 0, bl );
  endif;
end checkStock;

procedure getCredits( item:uns8 );
var
  dollars: uns8;
  quarters: uns8;
  dimes: uns8;
  nickles: uns8;
  pennies: uns8;
  change: uns16;
begin getCredits;
  forever
    if ( item == 1 ) then
      stdout.put( "Please pay at least ", c_snickers, " credits: " );
      mov( c_snickers, cx );
    elseif ( item == 2 ) then
      stdout.put( "Please pay at least ", c_mounds, " credits: " );
      mov( c_mounds, cx );
    elseif ( item == 3 ) then
      stdout.put( "Please pay at least ", c_aj, " credits: " );
      mov( c_aj, cx );
    elseif ( item == 4 ) then
      stdout.put( "Please pay at least ", c_mm, " credits: " );
      mov( c_mm, cx );
    elseif ( item == 5 ) then
      stdout.put( "Please pay at least ", c_skittles, " credits: " );
      mov( c_skittles, cx );
    endif;
    try
      stdin.getu16();
      // ax: amount paid
      // cx: cost
      // credits: amount in wallet
      unprotected
        if ( ax > credits ) then
          stdout.put( nl, "You do not have enough money to pay that amount!", nl, nl );
          mov( 0, bl );
          break;
        elseif ( ax >= cx && ax <= credits ) then
          stdout.put( nl, (type uns16 ax), " credits were taken.", nl );
          sub( cx, credits ); // removes from total 
          sub( cx, ax ); // finds the change
          // ax: change
          stdout.put( (type uns16 ax), " of change returned in the form of:", nl ); 
          movzx( ax, eax );
          div( 100, dx:ax );
          stdout.put( (type uns16 ax), " dollars", nl );
          mov( dx, ax );
          mov( 0, dx );
          div( 25, dx:ax );
          stdout.put( (type uns16 ax), " quarters", nl );
          mov( dx, ax );
          mov( 0, dx );
          div( 10, dx:ax );
          stdout.put( (type uns16 ax), " dimes", nl );
          mov( dx, ax );
          mov( 0, dx );
          div( 5, dx:ax );
          stdout.put( (type uns16 ax), " nickles", nl );
          stdout.put( (type uns16 dx), " pennies", nl, nl );
          mov( 1, bl );
          break;
        elseif ( ax < cx ) then
          stdout.put( nl, "Value must be at least ", (type uns16 cx), ".", nl, nl );
        endif;
    anyexception
      stdout.put("Invalid input", nl);
    endtry;
  endfor;
end getCredits;

procedure buyItem( item:uns8 );
begin buyItem;
  getCredits( item );
  if ( bl != 0 ) then
   if ( item == 1 ) then
     dec( n_snickers );
   elseif ( item == 2 ) then
     dec( n_mounds ); 
   elseif ( item == 3 ) then
     dec( n_aj ); 
   elseif ( item == 4 ) then
     dec( n_mm ); 
   elseif ( item == 5 ) then
     dec( n_skittles ); 
   endif;
  endif;
end buyItem;

procedure getReceipt;
begin getReceipt;
// 5 3 6 8 4
  stdout.put( nl, "----- RECEIPT -----", nl );
  mov( 5, ch );
  sub( n_snickers, ch );
  mov( 100, al );
  mul( ch, al );
  stdout.put( "Snickers: ", (type uns8 ch) , " totaling ", (type uns16 ax), " credits", nl ); 
  mov( 3, ch );
  sub( n_mounds, ch );
  mov( 75, al );
  mul( ch, al );
  stdout.put( "Mounds: ", (type uns8 ch) , " totaling ", (type uns16 ax), " credits", nl ); 
  mov( 6, ch );
  sub( n_aj, ch );
  mov( 75, al );
  mul( ch, al );
  stdout.put( "Almond Joy: ", (type uns8 ch) , " totaling ", (type uns16 ax), " credits", nl ); 
  mov( 8, ch );
  sub( n_mm, ch );
  mov( 125, al );
  mul( ch, al );
  stdout.put( "M&M: ", (type uns8 ch) , " totaling ", (type uns16 ax), " credits", nl ); 
  mov( 4, ch );
  sub( n_skittles, ch );
  mov( 125, al );
  mul( ch, al );
  stdout.put( "Skittles: ", (type uns8 ch) , " totaling ", (type uns16 ax), " credits", nl, nl );
end getReceipt;

begin project1;
  stdout.put( nl );
  forever
    stdout.put( "----- VENDING MACHINE -----", nl );
    stdout.put( "Credits held: ", credits, nl );
    listItems();
    getUns8( "Choose an item [1-5] or 0 to leave: ", 1, 5 );
    breakif( al == 0 );
    checkStock( al );
    if ( bl == 1 ) then
      buyItem( al );
    else
      stdout.put( nl, "Item is sold out. Please select a different item.", nl, nl );
    endif;
  endfor;
  getReceipt();
end project1;
