/*
 * Project 2
 *
 * written by			Derek Lopes
 * created on			8 December 2015
 * last modified on		11 December 2015
 *
 * Create a single column spread sheet with simple
 * data calculations and different representation
 * modes of the numbers in each cell.
 *
 */
program project2;

// includes
#include( "stdlib.hhf" )
// static declarations
static
  numCells: uns8; // number of cells, starting with 1
  basePointer: dword; // pointer to the first cell in the array
  dataType: uns8; // type of data; 1 = int8, 2 = int16, 3 = int32
  representation: uns8 := 1; // representation of numbers; 1=dec, 2=bin, 3=hex
  calculation: uns8 := 1; // calculation type; 1=sum; 2=average; 3=min; 4=max
  calcError: uns8 := 0; // boolean; 1= calculation error, 0= no calculation error

// procedure forward declarations

procedure calcSum( basePointer_:dword; numCells_:uns8; dataType_:uns8 ); @returns( "ebx" ); @forward;

procedure calcAverage( basePointer_:dword; numCells_:uns8; dataType_:uns8 ); @returns( "ebx" ); @forward;

procedure calcMin( basePointer_:dword; numCells_:uns8; dataType_:uns8 ); @returns( "ebx" ); @forward;

procedure calcMax( basePointer_:dword; numCells_:uns8; dataType_:uns8 ); @returns( "ebx" ); @forward;

procedure changeCalculation; @forward;

procedure editCell( basePointer_:dword; cellNumber:uns8; dataType_:uns8; representation_:uns8); @forward;

procedure showBinary8( value: byte ); @forward;

procedure showBinary16( value: word ); @forward;

procedure showBinary32( value: dword ); @forward;

procedure changeRepresentation; @forward;

procedure displayCell( label_:string; pointer_:dword; dataType_:uns8; representation_:uns8 ); @forward;

procedure displayCells( basePointer_:dword; dataType_:uns8; numCells_:uns8; representation_:uns8; calculation_:uns8 ); @forward; 

procedure createArray( dataType_:uns8; numCells_:uns8 ); @returns( "eax" ); @forward;

procedure getUns8( prompt:string; min:uns8; max:uns8 ); @returns( "al" ); @forward;

procedure getUns32( prompt:string; min:uns32; max:uns32 ); @returns( "eax" ); @forward;

procedure getInt8( prompt:string; min:Int8; max:Int8 ); @returns( "al" ); @forward;

procedure getInt16( prompt:string; min:int16; max:int16 ); @returns( "ax" ); @forward;

procedure getInt32( prompt:string; min:int32; max:int32 ); @returns( "eax" ); @forward;

// procedure definitions

procedure calcSum( basePointer_:dword; numCells_:uns8; dataType_:uns8 );
begin calcSum;
  // eax holds basePointer
  push( eax );
  // ebx holds current cell value
  push( ebx );
  // ecx holds loop iterator
  push( ecx );
  // edx holds SUM
  push( edx );
  mov( basePointer_, eax );
  // set up edx for sum
  mov( 0, edx );
  dec( numCells_ );
  mov( 0, ecx );
  FOR_CALC_SUM:
  inc( ecx );
  dec( ecx );
  cmp( cl, numCells_ );
  jae END_FOR_CALC_SUM;
    SUM_DATA_1:
    cmp( dataType_, 1 );
    jne SUM_DATA_2;
      cmp( calcError, 1 );
      je END_SUM_SET;
      add( (type int8 [eax + ecx]), dl );
      // setc( calcError ); // This was my attempt to see if the number became too big or too small but it did not work. 
      jmp END_SUM_DATA; // It would not set it if it overflowed but would at other random times. 
    SUM_DATA_2:
    cmp( dataType_, 2 );
    jne SUM_DATA_3;
      cmp( calcError, 1 );
      je END_SUM_SET;
      add( (type int16 [eax + ecx * 2]), dx );
      // setc( calcError );
      jmp END_SUM_DATA;
    SUM_DATA_3:
      cmp( calcError, 1 );
      je END_SUM_SET;
      add( (type int32 [eax + ecx * 4]), edx );
      // setc( calcError );
    END_SUM_DATA:
  inc( cl );
  jmp FOR_CALC_SUM;
  END_FOR_CALC_SUM:
  // sets the calculation cell
  SUM_SET_1:
  cmp( dataType_, 1 );
  jne SUM_SET_2;
    mov( (type int8 dl), (type int8 [eax + ecx]) );
    jmp END_SUM_SET;
  SUM_SET_2:
  cmp( dataType_, 2 );
  jne SUM_SET_3;
    mov( (type int16 dx), (type int16 [eax + ecx * 2]) );
    jmp END_SUM_SET;
  SUM_SET_3:
    mov( (type int32 edx), (type int32 [eax + ecx * 4]) );
  END_SUM_SET:
  pop( edx );
  pop( ecx );
  pop( ebx );
  pop( eax );
end calcSum;

procedure calcAverage( basePointer_:dword; numCells_:uns8; dataType_:uns8 );
begin calcAverage;
  // eax holds basePointer
  push( eax );
  // ebx sum for division
  push( ebx );
  // ecx holds loop iterator
  push( ecx );
  // edx holds AVERAGE
  push( edx );
  mov( basePointer_, eax );
  // set up edx for average
  mov( 0, edx );
  dec( numCells_ );
  mov( 0, ecx );
  FOR_CALC_AVERAGE:
  inc( ecx );
  dec( ecx );
  cmp( cl, numCells_ );
  jae END_FOR_CALC_AVERAGE;
    AVERAGE_DATA_1:
    cmp( dataType_, 1 );
    jne AVERAGE_DATA_2;
      cmp( calcError, 1 );
      je END_AVERAGE_SET;
      add( (type int8 [eax + ecx]), dl );
      // setc( calcError ); // I attempted the same thing here (since this is the same code) 
      jmp END_AVERAGE_DATA;
    AVERAGE_DATA_2:
    cmp( dataType_, 2 );
    jne AVERAGE_DATA_3;
      cmp( calcError, 1 );
      je END_AVERAGE_SET;
      add( (type int16 [eax + ecx * 2]), dx );
      // setc( calcError );
      jmp END_AVERAGE_DATA;
    AVERAGE_DATA_3:
      cmp( calcError, 1 );
      je END_AVERAGE_SET;
      add( (type int32 [eax + ecx * 4]), edx );
      // setc( calcError );
    END_AVERAGE_DATA:
  inc( cl );
  jmp FOR_CALC_AVERAGE;
  END_FOR_CALC_AVERAGE:
  // sets the calculation cell
  mov( edx, ebx );
  AVERAGE_SET_1:
  cmp( dataType_, 1 );
  jne AVERAGE_SET_2;
    push( eax );
    mov( ebx, eax );
    cbw();
    idiv( cl );
    mov( al, bl );
    pop( eax );
    mov( (type int8 bl), (type int8 [eax + ecx]) );
    jmp END_AVERAGE_SET;
  AVERAGE_SET_2:
  cmp( dataType_, 2 );
  jne AVERAGE_SET_3;
    push( eax );
    mov( ebx, eax );
    cwd();
    idiv( cx );
    mov( ax, bx );
    pop( eax );
    mov( (type int16 bx), (type int16 [eax + ecx * 2]) );
    jmp END_AVERAGE_SET;
  AVERAGE_SET_3:
    push( eax );
    mov( ebx, eax );
    cdq();
    idiv( ecx );
    mov( eax, ebx );
    pop( eax );
    mov( (type int32 ebx), (type int32 [eax + ecx * 4]) );
  END_AVERAGE_SET:
  pop( edx );
  pop( ecx );
  pop( ebx );
  pop( eax );
end calcAverage;

procedure calcMin( basePointer_:dword; numCells_:uns8; dataType_:uns8 );
begin calcMin;
  // eax holds basePointer
  push( eax );
  // ebx holds current min
  push( ebx );
  // ecx holds loop iterator
  push( ecx );
  // edx holds SUM
  push( edx );
  mov( basePointer_, eax );
  // set up edx for sum
  mov( (type int32 [eax]), edx );
  dec( numCells_ );
  mov( 0, ecx );
  FOR_CALC_MIN:
  inc( ecx );
  dec( ecx );
  cmp( cl, numCells_ );
  jae END_FOR_CALC_MIN;
    MIN_DATA_1:
    cmp( dataType_, 1 );
    jne MIN_DATA_2;
      cmp( dl, (type int8 [eax + ecx]) );
      jle END_MIN_DATA;
        mov( (type int8 [eax + ecx]), dl );
      jmp END_MIN_DATA;
    MIN_DATA_2:
    cmp( dataType_, 2 );
    jne MIN_DATA_3;
      cmp( dx, (type int16 [eax + ecx * 2]) );
      jle END_MIN_DATA;
        mov( (type int16 [eax + ecx * 2]), dx );
      jmp END_MIN_DATA;
    MIN_DATA_3:
      cmp( edx, (type int32 [eax + ecx * 4]) );
      jle END_MIN_DATA;
        mov( (type int32 [eax + ecx * 4]), edx );
    END_MIN_DATA:
  inc( cl );
  jmp FOR_CALC_MIN;
  END_FOR_CALC_MIN:
  // sets the calculation cell
  MIN_SET_1:
  cmp( dataType_, 1 );
  jne MIN_SET_2;
    mov( (type int8 dl), (type int8 [eax + ecx]) );
    jmp END_MIN_SET;
  MIN_SET_2:
  cmp( dataType_, 2 );
  jne MIN_SET_3;
    mov( (type int16 dx), (type int16 [eax + ecx * 2]) );
    jmp END_MIN_SET;
  MIN_SET_3:
    mov( (type int32 edx), (type int32 [eax + ecx * 4]) );
  END_MIN_SET:
  pop( edx );
  pop( ecx );
  pop( ebx );
  pop( eax );
end calcMin;

procedure calcMax( basePointer_:dword; numCells_:uns8; dataType_:uns8 );
begin calcMax;
  // eax holds basePointer
  push( eax );
  // ebx holds current max
  push( ebx );
  // ecx holds loop iterator
  push( ecx );
  // edx holds SUM
  push( edx );
  mov( basePointer_, eax );
  // set up edx for sum
  mov( (type int32 [eax]), edx );
  dec( numCells_ );
  mov( 0, ecx );
  FOR_CALC_MAX:
  inc( ecx );
  dec( ecx );
  cmp( cl, numCells_ );
  jae END_FOR_CALC_MAX;
    MAX_DATA_1:
    cmp( dataType_, 1 );
    jne MAX_DATA_2;
      cmp( dl, (type int8 [eax + ecx]) );
      jge END_MAX_DATA;
        mov( (type int8 [eax + ecx]), dl );
      jmp END_MAX_DATA;
    MAX_DATA_2:
    cmp( dataType_, 2 );
    jne MAX_DATA_3;
      cmp( dx, (type int16 [eax + ecx * 2]) );
      jge END_MAX_DATA;
        mov( (type int16 [eax + ecx * 2]), dx );
      jmp END_MAX_DATA;
    MAX_DATA_3:
      cmp( edx, (type int32 [eax + ecx * 4]) );
      jge END_MAX_DATA;
        mov( (type int32 [eax + ecx * 4]), edx );
    END_MAX_DATA:
  inc( cl );
  jmp FOR_CALC_MAX;
  END_FOR_CALC_MAX:
  // sets the calculation cell
  MAX_SET_1:
  cmp( dataType_, 1 );
  jne MAX_SET_2;
    mov( (type int8 dl), (type int8 [eax + ecx]) );
    jmp END_MAX_SET;
  MAX_SET_2:
  cmp( dataType_, 2 );
  jne MAX_SET_3;
    mov( (type int16 dx), (type int16 [eax + ecx * 2]) );
    jmp END_MAX_SET;
  MAX_SET_3:
    mov( (type int32 edx), (type int32 [eax + ecx * 4]) );
  END_MAX_SET:
  pop( edx );
  pop( ecx );
  pop( ebx );
  pop( eax );
end calcMax;

procedure changeCalculation;
begin changeCalculation;
  push( eax );
  stdout.put( "Choose a calculation: ", nl ); 
  stdout.put( "[1] Sum", nl, "[2] Average", nl, "[3] Minimum", nl, "[4] Maximum", nl );
  getUns8( "Enter your choice (1-4): ", 1, 4 );
  mov( al, calculation );
  pop( eax );
end changeCalculation;

procedure editCell( basePointer_:dword; cellNumber:uns8; dataType_:uns8; representation_:uns8 );
begin editCell;
  // eax holds pointer
  push( eax );
  // ebx holds new value
  push( ebx );
  // edx holds cell number
  push( edx );
    mov( 0, edx );
    dec( cellNumber );
    mov( cellNumber, dl );
    mov( basePointer_, eax );
    EDIT_DATA_1:
    cmp( dataType_, 1 );
    jne EDIT_DATA_2;
      add( edx, eax );
      displayCell( "Old value: ", eax, dataType_, representation_ );
      stdout.newln();
      push( eax );
      mov( 0, eax );
      getInt8( "Enter a new value: ", -128, 127);
      // bl holds new value
      mov( al, bl );
      pop( eax );
      mov( (type int8 bl), [eax] ); 
      jmp END_EDIT_DATA;
    EDIT_DATA_2:
    cmp( dataType_, 2 );
    jne EDIT_DATA_3;
      push( eax );
      mov( edx, eax );
      mul( 2, eax );
      mov( eax, edx );
      pop( eax );
      add( edx, eax );
      displayCell( "Old value: ", eax, dataType_, representation_ );
      stdout.newln();
      push( eax );
      mov( 0, eax );
      getInt16( "Enter a new value: ", -32768, 32767);
      // bx holds new value
      mov( ax, bx );
      pop( eax );
      mov( (type int16 bx), [eax] ); 
      jmp END_EDIT_DATA;
    EDIT_DATA_3:
      push( eax );
      mov( edx, eax );
      mul( 4, eax );
      mov( eax, edx );
      pop( eax );
      add( edx, eax );
      displayCell( "Old value: ", eax, dataType_, representation_ );
      stdout.newln();
      push( eax );
      mov( 0, eax );
      getInt32( "Enter a new value: ", -2147483648, 2147483647);
      // ebx holds new value
      mov( eax, ebx );
      pop( eax );
      mov( (type int32 ebx), [eax] ); 
    END_EDIT_DATA:
  pop( ebx );
  pop( eax );
end editCell;

procedure showBinary8( value: byte );
begin showBinary8;
  push( eax );
  push( ecx );
  mov( value, al );
  stdout.put( "%" )
  mov( 0, ecx );
  FOR_SHOW_BINARY_8:
  cmp( cl, 8 );
  jae END_FOR_SHOW_BINARY_8;
    shl( 1, al );
    jnc ELSE_CARRY_BIN_8;
      stdout.put( "1" );
      jmp END_IF_CARRY_BIN_8;
    ELSE_CARRY_BIN_8:
      stdout.put( "0" );
    END_IF_CARRY_BIN_8:
    cmp( cl, 3 );
    jne NO_UNDER_BIN_8;
      stdout.put( "_" );
    NO_UNDER_BIN_8:
  inc( cl );
  jmp FOR_SHOW_BINARY_8;
  END_FOR_SHOW_BINARY_8:
  stdout.newln();
  pop( ecx );
  pop( eax );
end showBinary8;

procedure showBinary16( value: word );
begin showBinary16;
  push( eax );
  push( ecx );
  mov( value, ax );
  stdout.put( "%" )
  mov( 0, ecx );
  FOR_SHOW_BINARY_16:
  cmp( cl, 16 );
  jae END_FOR_SHOW_BINARY_16;
    shl( 1, al );
    jnc ELSE_CARRY_BIN_16;
      stdout.put( "1" );
      jmp END_IF_CARRY_BIN_16;
    ELSE_CARRY_BIN_16:
      stdout.put( "0" );
    END_IF_CARRY_BIN_16:
    cmp( cl, 3 );
    jne UNDER_BIN_16_2;
      stdout.put( "_" );
      jmp NO_UNDER_BIN_16;
    UNDER_BIN_16_2:
    cmp( cl, 7 );
    jne UNDER_BIN_16_3;
      stdout.put( "_" );
      jmp NO_UNDER_BIN_16;
    UNDER_BIN_16_3:
    cmp( cl, 11 );
    jne NO_UNDER_BIN_16;
      stdout.put( "_" );
    NO_UNDER_BIN_16:
  inc( cl );
  jmp FOR_SHOW_BINARY_16;
  END_FOR_SHOW_BINARY_16:
  stdout.newln();
  pop( ecx );
  pop( eax );
end showBinary16;

procedure showBinary32( value: dword );
begin showBinary32;
  push( eax );
  push( ecx );
  mov( value, eax );
  stdout.put( "%" )
  mov( 0, ecx );
  FOR_SHOW_BINARY_32:
  cmp( cl, 32 );
  jae END_FOR_SHOW_BINARY_32;
    shl( 1, al );
    jnc ELSE_CARRY_BIN_32;
      stdout.put( "1" );
      jmp END_IF_CARRY_BIN_32;
    ELSE_CARRY_BIN_32:
      stdout.put( "0" );
    END_IF_CARRY_BIN_32:
    cmp( cl, 3 );
    jne UNDER_BIN_32_2;
      stdout.put( "_" );
      jmp END_UNDER_BIN_32;
    UNDER_BIN_32_2:
    cmp( cl, 7 );
    jne UNDER_BIN_32_3;
      stdout.put( "_" );
      jmp END_UNDER_BIN_32;
    UNDER_BIN_32_3:
    cmp( cl, 11 );
    jne UNDER_BIN_32_4;
      stdout.put( "_" );
    UNDER_BIN_32_4:
    cmp( cl, 15 );
    jne UNDER_BIN_32_5;
      stdout.put( "_" );
    UNDER_BIN_32_5:
    cmp( cl, 19 );
    jne UNDER_BIN_32_6;
      stdout.put( "_" );
    UNDER_BIN_32_6:
    cmp( cl, 23 );
    jne UNDER_BIN_32_7;
      stdout.put( "_" );
    UNDER_BIN_32_7:
    cmp( cl, 27 );
    jne END_UNDER_BIN_32;
      stdout.put( "_" );
    END_UNDER_BIN_32:
  inc( cl );
  jmp FOR_SHOW_BINARY_32;
  END_FOR_SHOW_BINARY_32:
  stdout.newln();
  pop( ecx );
  pop( eax );
end showBinary32;

procedure changeRepresentation;
begin changeRepresentation;
  push( eax );
  stdout.put( "Choose a presentation of your data: ", nl );
  stdout.put( "[1] Decimal", nl, "[2] Binary", nl, "[3] Hexadecimal", nl );
  getUns8( "Enter your choice (1-3): ", 1, 3 );
  mov( al, representation );
  pop( eax );
end changeRepresentation;

procedure displayCell( label_:string; pointer_:dword; dataType_:uns8; representation_:uns8 );
begin displayCell;
  // eax holds pointer_
  push( eax );
  mov( pointer_, eax );
  DISPCELL_DATA_1:
  cmp( dataType_, 1 );
  jne DISPCELL_DATA_2;
    REPCELL_1_DATA_1:
    cmp( representation_, 1 );
    jne REPCELL_2_DATA_1;
      stdout.put( label_, ": ", (type int8 [eax]), nl ); 
      jmp END_DISPCELL_DATA;
    REPCELL_2_DATA_1:
    cmp( representation_, 2 );
    jne REPCELL_3_DATA_1;
      stdout.put( label_, ": " );
      showBinary8( (type int8 [eax]) );
      jmp END_DISPCELL_DATA;
    REPCELL_3_DATA_1:
      mov( [eax], edx );
      stdout.put( label_, ": $", dl, nl ); 
      jmp END_DISPCELL_DATA;  
  DISPCELL_DATA_2:
  cmp( dataType_, 2 );
  jne DISPCELL_DATA_3;
    REPCELL_1_DATA_2:
    cmp( representation_, 1 );
    jne REPCELL_2_DATA_2;
      stdout.put( label_, ": ", (type int16 [eax]), nl ); 
      jmp END_DISPCELL_DATA;
    REPCELL_2_DATA_2:
    cmp( representation_, 2 );
    jne REPCELL_3_DATA_2;
      stdout.put( label_, ": " );
      showBinary16( (type int16 [eax]) );
      jmp END_DISPCELL_DATA;
    REPCELL_3_DATA_2:
      mov( [eax], edx );
      stdout.put( label_, ": $", dx, nl ); 
      jmp END_DISPCELL_DATA;
  DISPCELL_DATA_3:
    REPCELL_1_DATA_3:
    cmp( representation_, 1 );
    jne REPCELL_2_DATA_3;
      stdout.put( label_, ": ", (type int32 [eax]), nl ); 
      jmp END_DISPCELL_DATA;
    REPCELL_2_DATA_3:
    cmp( representation_, 2 );
    jne REPCELL_3_DATA_3;
      stdout.put( label_, ": " );
      showBinary32( (type int32 [eax]) );
      jmp END_DISPCELL_DATA;
    REPCELL_3_DATA_3:
      mov( [eax], edx );
      stdout.put( label_, ": $", edx, nl ); 
      jmp END_DISPCELL_DATA;
  END_DISPCELL_DATA:
  pop( eax );
end displayCell;

procedure displayCells( basePointer_:dword; dataType_:uns8; numCells_:uns8; representation_:uns8; calculation_:uns8 );
begin displayCells;
  // eax hold array pointer
  // ebx holds current cell number
  // ecx holds array iterator
  // edx is used as an intermediary for hex output
  push( eax );
  push( ebx );
  push( ecx );
  push( edx );
  mov( basePointer_, eax );
  mov( 0, ecx );
  dec( numCells_ );
  FOR_DISPLAY:
  mov( cl, bl );
  inc( bl );
  cmp( cl, numCells_ );
  jae FOR_DISPLAY_END;
    DISP_DATA_1:
    cmp( dataType_, 1 );
    jne DISP_DATA_2;
      REP_1_DATA_1:
      cmp( representation_, 1 );
      jne REP_2_DATA_1;
        stdout.put( (type uns8 bl), ": ", (type int8 [eax + ecx]), nl ); 
        jmp END_DISP_DATA;
      REP_2_DATA_1:
      cmp( representation_, 2 );
      jne REP_3_DATA_1;
        stdout.put( (type uns8 bl), ": " );
        showBinary8( (type int8 [eax + ecx]) );
        jmp END_DISP_DATA;
      REP_3_DATA_1:
        mov( [eax + ecx], edx );
        stdout.put( (type uns8 bl), ": $", dl, nl ); 
        jmp END_DISP_DATA;  
    DISP_DATA_2:
    cmp( dataType_, 2 );
    jne DISP_DATA_3;
      REP_1_DATA_2:
      cmp( representation_, 1 );
      jne REP_2_DATA_2;
        stdout.put( (type uns8 bl), ": ", (type int16 [eax + ecx * 2]), nl ); 
        jmp END_DISP_DATA;
      REP_2_DATA_2:
      cmp( representation_, 2 );
      jne REP_3_DATA_2;
        stdout.put( (type uns8 bl), ": " );
        showBinary16( (type int16 [eax + ecx * 2]) );
        jmp END_DISP_DATA;
      REP_3_DATA_2:
        mov( [eax + ecx * 2], edx );
        stdout.put( (type uns8 bl), ": $", dx, nl ); 
        jmp END_DISP_DATA;
    DISP_DATA_3:
      REP_1_DATA_3:
      cmp( representation_, 1 );
      jne REP_2_DATA_3;
        stdout.put( (type uns8 bl), ": ", (type int32 [eax + ecx * 4]), nl ); 
        jmp END_DISP_DATA;
      REP_2_DATA_3:
      cmp( representation_, 2 );
      jne REP_3_DATA_3;
        stdout.put( (type uns8 bl), ": " );
        showBinary32( (type int32 [eax + ecx * 4]) );
        jmp END_DISP_DATA;
      REP_3_DATA_3:
        mov( [eax + ecx * 4], edx );
        stdout.put( (type uns8 bl), ": $", edx, nl ); 
        jmp END_DISP_DATA;
    END_DISP_DATA:
    inc( cl );
  jmp FOR_DISPLAY;
  FOR_DISPLAY_END:
  mov( 0, ecx );
  mov( numCells_, cl );

  // sets eax to hold pointer to the calculations cell
  CALC_CELL_DATA_1:
  cmp( dataType_, 1 );
  jne CALC_CELL_DATA_2;
    add( ecx, eax );
    jmp CALC_CELL_DATA_END;
  CALC_CELL_DATA_2:
  cmp( dataType_, 2 );
  jne CALC_CELL_DATA_3;
    push( eax );
    mov( ecx, eax );
    mul( 2, eax );
    mov( eax, ecx );
    pop( eax );
    add( ecx, eax );
    jmp CALC_CELL_DATA_END;
  CALC_CELL_DATA_3:
    push( eax );
    mov( ecx, eax );
    mul( 4, eax );
    mov( eax, ecx );
    pop( eax );
    add( ecx, eax );
  CALC_CELL_DATA_END: 

  // display [ Error ] if calcError is true
  // does not work because carry bit is not set through the add function with integers
  // included becaues if it did, this would work
  cmp( calcError, 1 );
  jne DISP_CALC_1;
    CALC_ERROR_1:
    cmp( calculation_, 1 );
    jne CALC_ERROR_2;
      stdout.put( "Sum: [ Error ]", nl );
      jmp END_DISP_CALC;
    CALC_ERROR_2:
    cmp( calculation_, 2 );
    jne CALC_ERROR_3;
      stdout.put( "Average: [ Error ]", nl );
      jmp END_DISP_CALC;
    CALC_ERROR_3:
    cmp( calculation_, 3 );
    jne CALC_ERROR_2;
      stdout.put( "Maximum: [ Error ]", nl );
      jmp END_DISP_CALC;
    CALC_ERROR_4:
      stdout.put( "Maximum: [ Error ]", nl );
      jmp END_DISP_CALC;

  DISP_CALC_1:
  cmp( calculation_, 1 );
  jne DISP_CALC_2;
    displayCell( "Sum", eax, dataType_, representation_ ); 
    jmp END_DISP_CALC;
  DISP_CALC_2:
  cmp( calculation_, 2 );
  jne DISP_CALC_3;
    displayCell( "Average", eax, dataType_, representation_ ); 
    jmp END_DISP_CALC;
  DISP_CALC_3:
  cmp( calculation_, 3 );
  jne DISP_CALC_4;
    displayCell( "Minimum", eax, dataType_, representation_ ); 
    jmp END_DISP_CALC;
  DISP_CALC_4:
    displayCell( "Maximum", eax, dataType_, representation_ ); 
    jmp END_DISP_CALC;
  END_DISP_CALC:
  stdout.newln();
  pop( edx );
  pop( ecx );
  pop( ebx );
  pop( eax );
end displayCells;

procedure createArray( dataType_:uns8; numCells_:uns8 );
begin createArray;
  stdout.put( nl, "Number of cells (total): ", numCells_, nl "Data type: ", dataType_, nl );
  // ebx contains number of bytes allocated
  push( ebx );
  // eax contains cell amount (1 indexed) 
  mov( 0, eax );
  mov( numCells_, al );
  CREATE_INT8:
  cmp( dataType_, 1 );
  jne CREATE_INT16;
    mov( eax, ebx );
    mem.zalloc( eax );
    jmp CREATE_END;
  CREATE_INT16:
  cmp( dataType_, 2 );
  jne CREATE_INT32;
    mul( 2, eax );
    mov( eax, ebx );
    mem.zalloc( eax );
    jmp CREATE_END;
  CREATE_INT32:
    mul( 4, eax );
    mov( eax, ebx );
    mem.zalloc( eax );
  CREATE_END:
  stdout.put( nl, (type uns32 ebx), " bytes allocated", nl );
  pop( ebx );
end createArray;

procedure getUns8( prompt:string; min:uns8; max:uns8 );
begin getUns8;
  push( ebx );
  push( ecx );
  push( esi );
  push( edi );
  FOREVER_UNS8:
    stdout.put( prompt );
    try
      stdin.getu8();
      unprotected
      IF_UNS8:
      cmp( al, min );
      jb ELSE_UNS8;
      cmp( al, max );
      ja ELSE_UNS8;
          jmp ENDFOR_UNS8;
      ELSE_UNS8:
          stdout.put( "Value must be at least ", min, " and at most ", max, ".", nl );
      END_IF_UNS8:
    anyexception
      stdout.put( "Invalid input", nl );
    endtry;
  jmp FOREVER_UNS8;
  ENDFOR_UNS8:
  pop( edi );
  pop( esi );
  pop( ecx );
  pop( ebx );
end getUns8;

procedure getUns32( prompt:string; min:uns32; max:uns32 );
begin getUns32;
  push( ebx );
  push( ecx );
  push( esi );
  push( edi );
  FOREVER_UNS32:
    stdout.put( prompt );
    try
      stdin.getu32();
      unprotected
      IF_UNS8:
      cmp( eax, min );
      jb ELSE_UNS32;
      cmp( eax, max );
      ja ELSE_UNS32;
          jmp ENDFOR_UNS32;
      ELSE_UNS32:
          stdout.put( "Value must be at least ", min, " and at most ", max, ".", nl );
      END_IF_UNS32:
    anyexception
      stdout.put( "Invalid input", nl );
    endtry;
  jmp FOREVER_UNS32;
  ENDFOR_UNS32:
  pop( edi );
  pop( esi );
  pop( ecx );
  pop( ebx );
end getUns32;

procedure getInt8( prompt:string; min:int8; max:int8 );
begin getInt8;
  push( ebx );
  push( ecx );
  push( esi );
  push( edi );
  FOREVER_INT8:
    stdout.put( prompt );
    try
      stdin.geti8();
      unprotected
      IF_INT8:
      cmp( al, min );
      jl ELSE_INT8;
        jmp ENDFOR_INT8;
      cmp( al, max );
      jg ELSE_INT8;
        jmp ENDFOR_INT8;
      ELSE_INT8:
        stdout.put( "Value must be at least ", min, " and at most ", max, ".", nl );
      END_IF_INT8:
    anyexception
      stdout.put( "Invalid input", nl );
    endtry;
  jmp FOREVER_INT8;
  ENDFOR_INT8:
  pop( edi );
  pop( esi );
  pop( ecx );
  pop( ebx );
end getInt8;

procedure getInt16( prompt:string; min:int16; max:int16 );
begin getInt16;
  push( ebx );
  push( ecx );
  push( esi );
  push( edi );
  FOREVER_INT16:
    stdout.put( prompt );
    try
      stdin.geti16();
      unprotected
      IF_INT16:
      cmp( ax, min );
      jl ELSE_INT16;
      cmp( ax, max );
      jg ELSE_INT16;
          jmp ENDFOR_INT16;
      ELSE_INT16:
          stdout.put( "Value must be at least ", min, " and at most ", max, ".", nl );
      END_IF_INT16:
    anyexception
      stdout.put( "Invalid input", nl );
    endtry;
  jmp FOREVER_INT16;
  ENDFOR_INT16:
  pop( edi );
  pop( esi );
  pop( ecx );
  pop( ebx );
end getInt16;

procedure getInt32( prompt:string; min:int32; max:int32 );;
begin getInt32;
  push( ebx );
  push( ecx );
  push( esi );
  push( edi );
  FOREVER_INT32:
    stdout.put( prompt );
    try
      stdin.geti32();
      unprotected
      IF_INT32:
      cmp( eax, min );
      jl ELSE_INT32;
      cmp( eax, max );
      jg ELSE_INT32;
          jmp ENDFOR_INT32;
      ELSE_INT32:
          stdout.put( "Value must be at least ", min, " and at most ", max, ".", nl );
      END_IF_INT32:
    anyexception
      stdout.put( "Invalid input", nl );
    endtry;
  jmp FOREVER_INT32;
  ENDFOR_INT32:
  pop( edi );
  pop( esi );
  pop( ecx );
  pop( ebx );
end getInt32;

begin project2;

  START:
  console.cls();
  getUns8( "Enter number of cells desired (2-10): ", 2, 10 ); 
  mov( al, numCells );
  inc( numCells );
  stdout.newln();
  stdout.put( "Choose a data type:", nl, "[1]int8", nl "[2]int16", nl, "[3]int32", nl );
  getUns8( "Enter your choice (1-3): ", 1, 3 );
  mov( al, dataType );

  console.cls();
  createArray( dataType, numCells );
  mov( eax, basePointer );

  stdout.put( nl, "Press ENTER to continue..." );
  stdin.flushInput();
  push( eax );
  stdin.readLn();
  pop( eax );
  console.cls();

  FOREVER_MAIN:
  // CALCULATION CELL DATA
  CALCULATE_TYPE_1:
  cmp( calculation, 1 );
  jne CALCULATE_TYPE_2;
    calcSum( basePointer, numCells, dataType );
    jmp END_CALCULATE_TYPE;
  CALCULATE_TYPE_2:
  cmp( calculation, 2 );
  jne CALCULATE_TYPE_3;
    calcAverage( basePointer, numCells, dataType );
    jmp END_CALCULATE_TYPE;
  CALCULATE_TYPE_3:
  cmp( calculation, 3 );
  jne CALCULATE_TYPE_4;
    calcMin( basePointer, numCells, dataType );
    jmp END_CALCULATE_TYPE;
  CALCULATE_TYPE_4:
    calcMax( basePointer, numCells, dataType );
  END_CALCULATE_TYPE:

  // HEADER
  stdout.put( "TYPE: ");
  HEADER_TYPE_1:
  cmp( dataType, 1 );
  jne HEADER_TYPE_2;
    stdout.put( "int8     " );
    jmp HEADER_TYPE_END;
  HEADER_TYPE_2:
  cmp( dataType, 2 );
  jne HEADER_TYPE_3;
    stdout.put( "int16    " );
    jmp HEADER_TYPE_END;
  HEADER_TYPE_3:
    stdout.put( "int32    " );
  HEADER_TYPE_END:
  stdout.put( "PRESENTATION: " );
  HEADER_PRES_1:
  cmp( representation, 1 );
  jne HEADER_PRES_2;
    stdout.put( "decimal" );
    jmp HEADER_PRES_END;
  HEADER_PRES_2:
  cmp( representation, 2 );
  jne HEADER_PRES_3;
    stdout.put( "binary" );
    jmp HEADER_PRES_END;
  HEADER_PRES_3:
    stdout.put( "hexadecimal" );
  HEADER_PRES_END:

  stdout.newln();
  stdout.newln();
  displayCells( basePointer, dataType, numCells, representation, calculation ); 

  stdout.put( "[1] Edit a cell", nl, "[2] Change calculation", nl, "[3] Change presentation", nl, "[4] Reset and start over", nl, "[0] Exit program", nl, nl );
  getUns8( "Your choice (0-4): ", 0, 4 );
  MAIN_AL_0:
  cmp( al, 0 );
  jne MAIN_AL_1;
    jmp END_FOREVER_MAIN;
  MAIN_AL_1:
  cmp( al, 1 );
  jne MAIN_AL_2;
    stdout.newln();
    push( eax );
    mov( 0, eax );
    dec( numCells );
    getUns8( "Enter a cell number to edit: ", 1, numCells ); 
    inc( numCells );
    console.cls();
    editCell( basePointer, al, dataType, representation );
    pop( eax );
    stdout.put( nl, "Press ENTER to continue..." );
    stdin.flushInput();
    push( eax );
    stdin.readLn();
    pop( eax );
    console.cls();
    jmp MAIN_END_IF;
  MAIN_AL_2:
  cmp( al, 2 );
  jne MAIN_AL_3;
    stdout.newln();
    changeCalculation();
    console.cls();
    jmp MAIN_END_IF;
  MAIN_AL_3:
  cmp( al, 3 );
  jne MAIN_AL_4;
    changeRepresentation();
    stdout.newln();
    stdout.put( nl, "Press ENTER to continue..." );
    stdin.flushInput();
    push( eax );
    stdin.readLn();
    pop( eax );
    console.cls();
    jmp MAIN_END_IF;
  MAIN_AL_4:
    mem.free( basePointer );
    stdout.put( nl, "Memory has been cleared", nl );
    stdout.put( nl, "Press ENTER to continue..." );
    stdin.flushInput();
    push( eax );
    stdin.readLn();
    pop( eax );
    console.cls();
    mov( 1, representation );
    mov( 1, calculation );
    mov( 0, calcError );
    jmp START;
  MAIN_END_IF:
  jmp FOREVER_MAIN;
  END_FOREVER_MAIN:
  console.cls();
  mem.free( basePointer );
  stdout.put( "Memory has been cleared", nl );
  stdout.put( nl, "Press ENTER to exit..." );
  stdin.flushInput();
  push( eax );
  stdin.readLn();
  pop( eax );
  console.cls();
end project2;

