/*
 * Challenge 9
 *
 * written by			Derek Lopes
 * created on			28 October 2015
 * last modified on		28 October 2015
 *
 * Program using bitwise logic
 *
 */
program challenge9;

// includes
#include ("stdlib.hhf")

// procedure forward declarations
procedure getUns8( prompt:string; min:uns8; max:uns8 ); @returns( "al" ); @forward;

procedure showBits( value: byte ); @forward;

procedure getInt8( prompt:string; min:int8; max:int8 ); @returns( "al" ); @forward;

// procedure definitions
procedure getUns8( prompt:string; min:uns8; max:uns8 );
begin getUns8;
  push( ebx );
  push( ecx );
  // push( edx );
  push( esi );
  push( edi );
  forever
    stdout.put( prompt );
    try
      stdin.getu8();
      unprotected
        if( al >= min && al <= max ) then
          break;
        else
          stdout.put( "Value must be at least ", min, " and at most ", max, ".", nl );
        endif;
    anyexception
      stdout.put( "Invalid input", nl );
    endtry;
  endfor;
  pop( edi );
  pop( esi );
  // pop( edx );
  pop( ecx );
  pop( ebx );
end getUns8;

procedure getInt8( prompt:string; min:int8; max:int8 );
begin getInt8;
  push( ebx );
  push( ecx );
  // push( edx );
  push( esi );
  push( edi );
  forever
    stdout.put( prompt );
    try
      stdin.geti8();
      unprotected
        if( al >= min && al <= max ) then
          break;
        else
          stdout.put( "Value must be at least ", min, " and at most ", max, ".", nl );
        endif;
    anyexception
      stdout.put( "Invalid input", nl );
    endtry;
  endfor;
  pop( edi );
  pop( esi );
  // pop( edx );
  pop( ecx );
  pop( ebx );
end getInt8;

procedure showBits( value: byte );
begin showBits;
  push( eax );
  push( ecx );
  
  mov( value, al );
  stdout.put( "%" )
  for( mov( 0, cl ); cl < 8; inc( cl ) ) do
    shl( 1, al );
    if ( @c ) then
      stdout.put( "1" );
    else
      stdout.put( "0" );
    endif;

    if ( cl == 3 ) then
      stdout.put( "_" );
    endif;
  endfor;

  stdout.newln();

  pop( ecx );
  pop( eax );

end showBits;

begin challenge9;

  // PART 1
  stdout.put( nl, "PART ONE: not", nl );
  getUns8( "Please enter a number between 0 and 255: ", 0, 255 );
  stdout.put( nl, "input [decimal]: " );
  stdout.putu8Size( (type uns8 al), 9, ' ' );
  stdout.newln();
  stdout.put( "input [binary]: " );
  showBits( al );
  stdout.newln();
  not( al );
  stdout.put( "bitwise compmlement [decimal]: ");
  stdout.puti8Size( (type uns8 al), 8, ' ' );
  stdout.newln();
  stdout.put( "bitwise complement [binary]: " )
  showBits( al );
  stdout.newln();
  
  stdout.put( "Press ENTER to continue" );
  stdin.readLn();
  console.cls();

  // PART 2
  stdout.put( nl, "PART TWO: not", nl );
  getInt8( "Please enter a number between -128 and 127: ", -128, 127 );
  stdout.put( nl, "input [decimal]: ", (type int8 al), nl );
  stdout.put( "input [binary]: " );
  stdout.put( "bits that are set: " );
  mov( 1, dl );
  for( mov(0, cl); cl < 8; inc(cl) ) do
    push( eax );
    and( dl, al );
    if ( dl == al ) then
      stdout.put( (type int8 cl), " " );
    endif;
    pop( eax );
    shl(1, dl );
  endfor;
  or( %1111_1111, al );
  stdout.put( nl, "all bits now set [binary]: %" );
  showBits( al );
  
  stdout.put( nl, "Press ENTER to continue" );
  stdin.readLn();
  console.cls();

  // PART 3
  stdout.put( "PART THREE: and/or", nl );
  getInt8( "Please enter a number between -128 to 127: ", -128, 127 );
  stdout.put( nl, "input [decimal]: " );
  stdout.puti8Size( (type int8 al), 10, ' ' );
  stdout.newln();
  stdout.put( "input [binary]: %" );
  showBits( al );
  push( eax );
  and( %1111_0000, al );
  stdout.put( "lower nibble cleared [binary]: %" );
  showBits( al );
  pop( eax );
  push( eax );
  and( %0000_1111, al );
  stdout.put( "upper nibble cleared [binary]: %" );
  showBits( al );
  pop( eax );
  stdout.newln();

  stdout.put( "Press ENTER to continue" );
  stdin.readLn();
  console.cls();

  // PART 4
  stdout.put( "PART FOUR: xor", nl );
  getInt8( "Please enter a number between -128 to 127: ", -128, 127 );
  stdout.put( nl, "input [decimal]: " );
  stdout.puti8Size( (type int8 al), 10, ' ' );
  stdout.newln();
  stdout.put( "input [binary]: %" );
  showBits( al );
  push( eax );
  xor( %1111_1111, al );
  stdout.put( "bitwise compliment [binary]: %" );
  showBits( al );
  pop( eax );
  xor( al, al );
  stdout.put( "zeroed out [binary]: %" );
  showBits( al );

  stdout.newln();

end challenge9;
